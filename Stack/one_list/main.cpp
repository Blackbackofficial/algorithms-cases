#include <iostream>

struct comp {
    int Data;
    comp *next;
};

void push(comp **top, int element) {
    comp *q;
    q = new comp();
    q->Data = element;
    if (*top == nullptr) {
        *top = q;
    }
    else {
        q->next = *top;
        *top = q;
    }
}

void s_delete_key(comp **top, int N) {//функция которая принимает вершину top и число которое нужно удалить
    comp *q = *top; //создаем указатель типа comp и приравниваем(ставим) его на вершину стека
    comp *prev = NULL;//создаем указатель на предыдуший элемент, с начала он будет пустым
    while (q != NULL) {//пока указатель q не путой, мы его будем проверять, если он все же пусть цикл заканчивается
        if (q->Data == N) {//если Data элемента равна числу, которое нам нужно удалить
            if (q == *top) {//если такой указатель равен вершине, то есть элемент, который нам нужно удалить - вершина
                *top = q->next;//передвигаем вершину на следующий элемент
                free(q);//очищаем ячейку
                q->Data = NULL; //Далее во избежание ошибок мы обнуляем переменные в удаленной ячейке, так как в некоторых компиляторах удаленная ячейка имеет переменные не NULL значения, а дословно "Чение памяти невозможно" или числа  "-2738568384" или других, в зависимости от компилятора.
                q->next = NULL;
            }
            else//если элемент последний или находится между двумя другими элементами
            {
                prev->next = q->next;//Проводим связь от предыдущего элемента к следующему
                free(q);//очищаем ячейку
                q->Data = NULL;//обнуляем переменные
                q->next = NULL;
            }
        }// если Data элемента НЕ равна числу, которое нам нужно удалить
        prev = q; //запоминаем текущую ячейку как предыдущую
        q = q->next;//перемещаем указатель q на следующий элемент
    }
}

void s_print(comp *top) { //принимает указатель на вершину стека
    comp *q = top; //устанавливаем q на вершину
    while (q) { //пока q не пустой (while(q) эквивалентно while(q != NULL))
        printf("%i", q->Data);//выводим на экран данные ячейки стека
        q = q->next;//после того как вывели передвигаем q на следующий элемент(ячейку)
    }
}

int main() {
    comp *top = nullptr;
    int i = 456;
    int *value = &i;
    push(&top, *value);
    push(&top, 2);
    push(&top, 3);
    push(&top, 4);
    i = 1;
    s_print(top);

    return 0;
}